Notes about Terraform v1.1.6

=======================================

Terraform - Open Source project from HashiCorp, created in 2014 year, its great tool for creating infrustructure using code (IaaC)

It's a programming language for cloud platforms

It's compatible with:
>AWS
>GCP
>Azure
>Yandex
>etc.

Syntax fo code - Hashicorp Configuration Language (HCL)
Default txt files
All txt editors
No COMPILATION
ALL PLATFORMS

========================================

When you wrote your script, you shold use command:
>terraform init (to add additional file for your privider)
>terraform plan (will check your file and show what IF)
>terraform apply (and click yes to create resources)

========================================

Creating resources

#1. Add which cloud we will use
Example of creating resources (you need AWS acc with access to CLI)

provider "aws" {
  access_key = "your acces_key"
  secret_key = "your secret_key"
  region = "us-east-2" (some region)
}

resource "aws_instance" "my_ubuntu" {
  #count = 3 how much servers you want to create
  ami = "ami-0fb653ca2d3203ac1"
  instance_type = "t2.micro"
}

=========================================

Changing AWS Resources 

provider "aws" {
  access_key = "your acces_key"
  secret_key = "your secret_key"
  region = "us-east-2" (some region)
}

resource "aws_instance" "my_ubuntu" {
  #count = 3 how much servers you want to create
  ami = "ami-0fb653ca2d3203ac1"
  instance_type = "t2.micro"

  #Adding new parameter "Tags"

  tags = {
    Name = "new_name"
    Owner = "Harry"
  }
}

If you will add new tag from GUI, terraform will say that it's should be deleted (Cause it's not in code)

===========================================

Deleting Resources from terraform

Good practice to save your credentials and region in system environment (or terminal session env)

On windows in CMD :
>set AWS_ACCESS_KEY_ID=your_access_key
>set AWS_SECRET_ACCESS_KEY=your secret_access_key


===========================================

Using Script (AWS Bootstraping)

Example in code:

resource "aws_instance" "my_webserver" {
  #count = 3 how much servers you want to create
  ami = "ami-0fb653ca2d3203ac1"
  instance_type = "t2.micro"
  #Attaching security group to instance
  vpc_security_group_ids = [aws_security_group.my_webserver.id]
  #Bootstraping in AWS it's commands witch will run when server starts
  user_data = <<EOF
#!/bin/bash
sudo apt-get -y update
sudo apt-get -y install apache2
sudo ufw allow 'Apache'
sudo systemctl start apache2
EOF
}


===========================================

Using static external script files

example in code

resource "aws_instance" "my_webserver" {
  #count = 3 how much servers you want to create
  ami = "ami-0fb653ca2d3203ac1"
  instance_type = "t2.micro"
  #Attaching security group to instance
  vpc_security_group_ids = [aws_security_group.my_webserver.id]
  #Bootstraping in AWS it's commands witch will run when server starts
  user_data = file("user_data.sh") #Path to script file 

  tags = {
    Name = "Web Server"
    Owner = "Denis"
  }
}

!!! If you change your script terraform will destroy previous server and run new with new script

==============================================

Template files

Adding params to your template file, Dynamics external files

Example of .tf file:

resource "aws_instance" "my_webserver" {
  #count = 3 how much servers you want to create
  ami = "ami-0fb653ca2d3203ac1"
  instance_type = "t2.micro"
  #Attaching security group to instance
  vpc_security_group_ids = [aws_security_group.my_webserver.id]
  #Bootstraping in AWS it's commands witch will run when server starts
  user_data = templatefile("user_data.sh.tpl", {
    f_name = "Daniel",
    l_name = "Nemch",
    names = ["Max", "Drew"]
  })

  tags = {
    Name = "Web Server"
    Owner = "Denis"
  }
}

Example of user_data.sh.tpl:

#!/bin/bash
sudo apt-get -y update
sudo apt-get -y install apache2
sudo ufw allow 'Apache'

cat <<EOF > /var/www/html/index.html
<html>
<h2>Build by terraform</h2>
<br>
<h1>Owner name: ${f_name} ${l_name}
%{ for x in names ~}
<div>
  Hello to ${x}
</div>
%{ endfor ~}
</html>
EOF

sudo systemctl start apache2 

=================================================

Dynamic Code blocks

  #Dynamic code block
  dynamic "ingress" {
    for_each = ["80", "443", "22"]
    content {
      description      = "HTTP from VPC"
      from_port        = ingress.value
      to_port          = ingress.value
      protocol         = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    }
  }


will create content by replacing items 

